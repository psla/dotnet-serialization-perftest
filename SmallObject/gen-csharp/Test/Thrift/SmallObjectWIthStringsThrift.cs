/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Test.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SmallObjectWithStringsThrift : TBase
  {
    private string _String1;
    private string _String2;
    private string _String3;
    private string _String4;

    public string String1
    {
      get
      {
        return _String1;
      }
      set
      {
        __isset.String1 = true;
        this._String1 = value;
      }
    }

    public string String2
    {
      get
      {
        return _String2;
      }
      set
      {
        __isset.String2 = true;
        this._String2 = value;
      }
    }

    public string String3
    {
      get
      {
        return _String3;
      }
      set
      {
        __isset.String3 = true;
        this._String3 = value;
      }
    }

    public string String4
    {
      get
      {
        return _String4;
      }
      set
      {
        __isset.String4 = true;
        this._String4 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool String1;
      public bool String2;
      public bool String3;
      public bool String4;
    }

    public SmallObjectWithStringsThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.String) {
                String1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                String2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                String3 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.String) {
                String4 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SmallObjectWithStringsThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (String1 != null && __isset.String1) {
          field.Name = "String1";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(String1);
          oprot.WriteFieldEnd();
        }
        if (String2 != null && __isset.String2) {
          field.Name = "String2";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(String2);
          oprot.WriteFieldEnd();
        }
        if (String3 != null && __isset.String3) {
          field.Name = "String3";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(String3);
          oprot.WriteFieldEnd();
        }
        if (String4 != null && __isset.String4) {
          field.Name = "String4";
          field.Type = TType.String;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(String4);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SmallObjectWithStringsThrift(");
      bool __first = true;
      if (String1 != null && __isset.String1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String1: ");
        __sb.Append(String1);
      }
      if (String2 != null && __isset.String2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String2: ");
        __sb.Append(String2);
      }
      if (String3 != null && __isset.String3) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String3: ");
        __sb.Append(String3);
      }
      if (String4 != null && __isset.String4) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String4: ");
        __sb.Append(String4);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
